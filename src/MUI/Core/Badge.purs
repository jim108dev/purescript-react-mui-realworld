{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Badge where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Color :: Type

color ::
  { default :: Color
  , error :: Color
  , primary :: Color
  , secondary :: Color
  }
color = { default: unsafeCoerce "default", error: unsafeCoerce "error", primary: unsafeCoerce "primary", secondary: unsafeCoerce "secondary" }

foreign import data Horizontal :: Type

horizontal ::
  { left :: Horizontal
  , right :: Horizontal
  }
horizontal = { left: unsafeCoerce "left", right: unsafeCoerce "right" }

foreign import data Variant :: Type

variant ::
  { dot :: Variant
  , standard :: Variant
  }
variant = { dot: unsafeCoerce "dot", standard: unsafeCoerce "standard" }

foreign import data Vertical :: Type

vertical ::
  { bottom :: Vertical
  , top :: Vertical
  }
vertical = { bottom: unsafeCoerce "bottom", top: unsafeCoerce "top" }

instance eqVertical :: Eq Vertical where
  eq = unsafeRefEq

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqHorizontal :: Eq Horizontal where
  eq = unsafeRefEq

instance eqColor :: Eq Color where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type BadgeClassesGenericRow a
  = ( anchorOriginBottomLeftRectangle :: a
    , anchorOriginBottomRightCircle :: a
    , anchorOriginBottomRightRectangle :: a
    , anchorOriginTopLeftCircle :: a
    , anchorOriginTopLeftRectangle :: a
    , anchorOriginTopRightCircle :: a
    , anchorOriginTopRightRectangle :: a
    , badge :: a
    , colorError :: a
    , colorPrimary :: a
    , colorSecondary :: a
    , dot :: a
    , invisible :: a
    , root :: a
    )

type BadgeClassesKey
  = BadgeClassesGenericRow String

type BadgeClassesJSS
  = BadgeClassesGenericRow JSS

type BadgeOptPropsRow (r :: # Type)
  = ( anchorOrigin :: { horizontal :: Horizontal, vertical :: Vertical }
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , badgeContent :: JSX
    , children :: Array JSX
    , classes :: { | BadgeClassesKey }
    , color :: Color
    , invisible :: Boolean
    , max :: Number
    , showZero :: Boolean
    , variant :: Variant
    | r
    )

type BadgeReqPropsRow (r :: # Type)
  = r

type BadgePropsRow (r :: # Type)
  = BadgeOptPropsRow (BadgeReqPropsRow r)

foreign import _UnsafeBadge :: forall componentProps. ReactComponent { | BadgePropsRow componentProps }

_Badge ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BadgeReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BadgePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Badge = unsafeCoerce _UnsafeBadge

badge ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BadgeReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BadgePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
badge ps = element _Badge ps

badge' :: BadgeProps -> JSX
badge' = MUI.React.Basic.element _Badge'

_Badge' :: ReactComponent BadgeProps
_Badge' = unsafeCoerce _UnsafeBadge

badgeWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ BadgeClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (BadgeProps -> JSX)
badgeWithStyles style = render
  where
  withStyles' :: ReactComponent BadgeProps -> Effect.Effect (ReactComponent BadgeProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Badge'

  render = map MUI.React.Basic.element styledComponent

foreign import data BadgeProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BadgeReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BadgePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> BadgeProps
props = unsafeCoerce
