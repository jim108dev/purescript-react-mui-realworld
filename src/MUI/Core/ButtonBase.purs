{- This module was autogenerated. Please don't edit. -}
module MUI.Core.ButtonBase where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_button) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data Type_ :: Type

type_ ::
  { button :: Type_
  , reset :: Type_
  , submit :: Type_
  }
type_ = { button: unsafeCoerce "button", reset: unsafeCoerce "reset", submit: unsafeCoerce "submit" }

instance eqType :: Eq Type_ where
  eq = unsafeRefEq

type ButtonBaseClassesGenericRow a
  = ( disabled :: a
    , focusVisible :: a
    , root :: a
    )

type ButtonBaseClassesKey
  = ButtonBaseClassesGenericRow String

type ButtonBaseClassesJSS
  = ButtonBaseClassesGenericRow JSS

type ButtonBaseOptPropsRow (r :: # Type)
  = ( action :: Foreign.Foreign
    , buttonRef :: Foreign.Foreign
    , centerRipple :: Boolean
    , classes :: { | ButtonBaseClassesKey }
    , color :: String
    , disableRipple :: Boolean
    , disabled :: Boolean
    , focusRipple :: Boolean
    , focusVisibleClassName :: String
    , onFocusVisible :: React.Basic.Events.EventHandler
    , "type" :: Type_
    | r
    )

type ButtonBaseReqPropsRow (r :: # Type)
  = r

type ButtonBasePropsRow (r :: # Type)
  = ButtonBaseOptPropsRow (ButtonBaseReqPropsRow r)

foreign import _UnsafeButtonBase :: forall componentProps. ReactComponent { | ButtonBasePropsRow componentProps }

_ButtonBase ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ButtonBaseReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ButtonBasePropsRow React.Basic.DOM.Props_button) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_ButtonBase = unsafeCoerce _UnsafeButtonBase

buttonBase ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ButtonBaseReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ButtonBasePropsRow React.Basic.DOM.Props_button) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
buttonBase ps = element _ButtonBase ps

buttonBase' :: ButtonBaseProps -> JSX
buttonBase' = MUI.React.Basic.element _ButtonBase'

_ButtonBase' :: ReactComponent ButtonBaseProps
_ButtonBase' = unsafeCoerce _UnsafeButtonBase

buttonBaseWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ ButtonBaseClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (ButtonBaseProps -> JSX)
buttonBaseWithStyles style = render
  where
  withStyles' :: ReactComponent ButtonBaseProps -> Effect.Effect (ReactComponent ButtonBaseProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _ButtonBase'

  render = map MUI.React.Basic.element styledComponent

foreign import data ButtonBaseProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ButtonBaseReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ButtonBasePropsRow React.Basic.DOM.Props_button) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> ButtonBaseProps
props = unsafeCoerce
