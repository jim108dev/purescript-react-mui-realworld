{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Drawer where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Modal (ModalProps) as MUI.Core.Modal
import MUI.Core.Paper (PaperProps) as MUI.Core.Paper
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import MUI.React.TransitionGroup (Timeout) as MUI.React.TransitionGroup
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data Anchor :: Type

anchor ::
  { bottom :: Anchor
  , left :: Anchor
  , right :: Anchor
  , top :: Anchor
  }
anchor = { bottom: unsafeCoerce "bottom", left: unsafeCoerce "left", right: unsafeCoerce "right", top: unsafeCoerce "top" }

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Variant :: Type

variant ::
  { permanent :: Variant
  , persistent :: Variant
  , temporary :: Variant
  }
variant = { permanent: unsafeCoerce "permanent", persistent: unsafeCoerce "persistent", temporary: unsafeCoerce "temporary" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

instance eqAnchor :: Eq Anchor where
  eq = unsafeRefEq

type DrawerClassesGenericRow a
  = ( docked :: a
    , modal :: a
    , paper :: a
    , paperAnchorBottom :: a
    , paperAnchorDockedBottom :: a
    , paperAnchorDockedLeft :: a
    , paperAnchorDockedRight :: a
    , paperAnchorDockedTop :: a
    , paperAnchorLeft :: a
    , paperAnchorRight :: a
    , paperAnchorTop :: a
    , root :: a
    )

type DrawerClassesKey
  = DrawerClassesGenericRow String

type DrawerClassesJSS
  = DrawerClassesGenericRow JSS

type DrawerOptPropsRow (r :: # Type)
  = ( "ModalProps" :: MUI.Core.Modal.ModalProps
    , "PaperProps" :: MUI.Core.Paper.PaperProps
    , anchor :: Anchor
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | DrawerClassesKey }
    , elevation :: Number
    , onClose :: React.Basic.Events.EventHandler
    , onEnter :: React.Basic.Events.EventHandler
    , onEntered :: React.Basic.Events.EventHandler
    , onEntering :: React.Basic.Events.EventHandler
    , onExit :: React.Basic.Events.EventHandler
    , onExited :: React.Basic.Events.EventHandler
    , onExiting :: React.Basic.Events.EventHandler
    , open :: Boolean
    , transitionDuration :: MUI.React.TransitionGroup.Timeout
    , variant :: Variant
    | r
    )

type DrawerReqPropsRow (r :: # Type)
  = r

type DrawerPropsRow (r :: # Type)
  = DrawerOptPropsRow (DrawerReqPropsRow r)

foreign import _UnsafeDrawer :: forall componentProps. ReactComponent { | DrawerPropsRow componentProps }

_Drawer ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DrawerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DrawerPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Drawer = unsafeCoerce _UnsafeDrawer

drawer ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DrawerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DrawerPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
drawer ps = element _Drawer ps

drawer' :: DrawerProps -> JSX
drawer' = MUI.React.Basic.element _Drawer'

_Drawer' :: ReactComponent DrawerProps
_Drawer' = unsafeCoerce _UnsafeDrawer

drawerWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ DrawerClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (DrawerProps -> JSX)
drawerWithStyles style = render
  where
  withStyles' :: ReactComponent DrawerProps -> Effect.Effect (ReactComponent DrawerProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Drawer'

  render = map MUI.React.Basic.element styledComponent

foreign import data DrawerProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DrawerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DrawerPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> DrawerProps
props = unsafeCoerce
