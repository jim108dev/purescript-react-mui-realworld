{- This module was autogenerated. Please don't edit. -}
module MUI.Core.ListItem where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_li) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AlignItems :: Type

alignItems ::
  { "FlexStart" :: AlignItems
  , center :: AlignItems
  }
alignItems = { "FlexStart": unsafeCoerce "flex-start", center: unsafeCoerce "center" }

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

instance eqAlignItems :: Eq AlignItems where
  eq = unsafeRefEq

type ListItemClassesGenericRow a
  = ( button :: a
    , container :: a
    , default :: a
    , dense :: a
    , disabled :: a
    , divider :: a
    , focusVisible :: a
    , gutters :: a
    , root :: a
    , secondaryAction :: a
    , selected :: a
    )

type ListItemClassesKey
  = ListItemClassesGenericRow String

type ListItemClassesJSS
  = ListItemClassesGenericRow JSS

type ListItemOptPropsRow (r :: # Type)
  = ( alignItems :: AlignItems
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , autoFocus :: Boolean
    , button :: Boolean
    , children :: Array JSX
    , classes :: { | ListItemClassesKey }
    , dense :: Boolean
    , disableGutters :: Boolean
    , disabled :: Boolean
    , divider :: Boolean
    , selected :: Boolean
    | r
    )

type ListItemReqPropsRow (r :: # Type)
  = r

type ListItemPropsRow (r :: # Type)
  = ListItemOptPropsRow (ListItemReqPropsRow r)

foreign import _UnsafeListItem :: forall componentProps. ReactComponent { | ListItemPropsRow componentProps }

_ListItem ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ListItemReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ListItemPropsRow React.Basic.DOM.Props_li) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_ListItem = unsafeCoerce _UnsafeListItem

listItem ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ListItemReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ListItemPropsRow React.Basic.DOM.Props_li) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
listItem ps = element _ListItem ps

listItem' :: ListItemProps -> JSX
listItem' = MUI.React.Basic.element _ListItem'

_ListItem' :: ReactComponent ListItemProps
_ListItem' = unsafeCoerce _UnsafeListItem

listItemWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ ListItemClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (ListItemProps -> JSX)
listItemWithStyles style = render
  where
  withStyles' :: ReactComponent ListItemProps -> Effect.Effect (ReactComponent ListItemProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _ListItem'

  render = map MUI.React.Basic.element styledComponent

foreign import data ListItemProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ListItemReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ListItemPropsRow React.Basic.DOM.Props_li) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> ListItemProps
props = unsafeCoerce
