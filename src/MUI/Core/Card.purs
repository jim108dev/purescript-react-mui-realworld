{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Card where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Paper (PaperPropsRow, PaperReqPropsRow) as MUI.Core.Paper
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type CardClassesGenericRow a
  = ( root :: a
    )

type CardClassesKey
  = CardClassesGenericRow String

type CardClassesJSS
  = CardClassesGenericRow JSS

type CardOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | CardClassesKey }
    , raised :: Boolean
    | r
    )

type CardReqPropsRow (r :: # Type)
  = r

type CardPropsRow (r :: # Type)
  = CardOptPropsRow (CardReqPropsRow r)

foreign import _UnsafeCard :: forall componentProps. ReactComponent { | CardPropsRow componentProps }

_Card ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Card = unsafeCoerce _UnsafeCard

card ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
card ps = element _Card ps

card' :: CardProps -> JSX
card' = MUI.React.Basic.element _Card'

_Card' :: ReactComponent CardProps
_Card' = unsafeCoerce _UnsafeCard

cardWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ CardClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (CardProps -> JSX)
cardWithStyles style = render
  where
  withStyles' :: ReactComponent CardProps -> Effect.Effect (ReactComponent CardProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Card'

  render = map MUI.React.Basic.element styledComponent

foreign import data CardProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardReqPropsRow (MUI.Core.Paper.PaperReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardPropsRow (MUI.Core.Paper.PaperPropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> CardProps
props = unsafeCoerce
