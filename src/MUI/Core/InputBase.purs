{- This module was autogenerated. Please don't edit. -}
module MUI.Core.InputBase where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Color :: Type

color ::
  { primary :: Color
  , secondary :: Color
  }
color = { primary: unsafeCoerce "primary", secondary: unsafeCoerce "secondary" }

foreign import data Margin :: Type

margin ::
  { dense :: Margin
  , none :: Margin
  }
margin = { dense: unsafeCoerce "dense", none: unsafeCoerce "none" }

foreign import data Rows :: Type

rows ::
  { number :: Number -> Rows
  , string :: String -> Rows
  }
rows = { number: unsafeCoerce, string: unsafeCoerce }

foreign import data RowsMax :: Type

rowsMax ::
  { number :: Number -> RowsMax
  , string :: String -> RowsMax
  }
rowsMax = { number: unsafeCoerce, string: unsafeCoerce }

instance eqMargin :: Eq Margin where
  eq = unsafeRefEq

instance eqColor :: Eq Color where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type InputBaseClassesGenericRow a
  = ( adornedEnd :: a
    , adornedStart :: a
    , colorSecondary :: a
    , disabled :: a
    , error :: a
    , focused :: a
    , formControl :: a
    , fullWidth :: a
    , input :: a
    , inputAdornedEnd :: a
    , inputAdornedStart :: a
    , inputHiddenLabel :: a
    , inputMarginDense :: a
    , inputMultiline :: a
    , inputTypeSearch :: a
    , marginDense :: a
    , multiline :: a
    , root :: a
    )

type InputBaseClassesKey
  = InputBaseClassesGenericRow String

type InputBaseClassesJSS
  = InputBaseClassesGenericRow JSS

type InputBaseOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , autoComplete :: String
    , autoFocus :: Boolean
    , className :: String
    , classes :: { | InputBaseClassesKey }
    , color :: Color
    , defaultValue :: Foreign.Foreign
    , disabled :: Boolean
    , endAdornment :: JSX
    , error :: Boolean
    , fullWidth :: Boolean
    , id :: String
    , inputProps :: Foreign.Foreign
    , inputRef :: Foreign.Foreign
    , margin :: Margin
    , multiline :: Boolean
    , name :: String
    , onChange :: React.Basic.Events.EventHandler
    , placeholder :: String
    , readOnly :: Boolean
    , required :: Boolean
    , rows :: Rows
    , rowsMax :: RowsMax
    , startAdornment :: JSX
    , "type" :: String
    , value :: Foreign.Foreign
    | r
    )

type InputBaseReqPropsRow (r :: # Type)
  = r

type InputBasePropsRow (r :: # Type)
  = InputBaseOptPropsRow (InputBaseReqPropsRow r)

foreign import _UnsafeInputBase :: forall componentProps. ReactComponent { | InputBasePropsRow componentProps }

_InputBase ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputBaseReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputBasePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_InputBase = unsafeCoerce _UnsafeInputBase

inputBase ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputBaseReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputBasePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
inputBase ps = element _InputBase ps

inputBase' :: InputBaseProps -> JSX
inputBase' = MUI.React.Basic.element _InputBase'

_InputBase' :: ReactComponent InputBaseProps
_InputBase' = unsafeCoerce _UnsafeInputBase

inputBaseWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ InputBaseClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (InputBaseProps -> JSX)
inputBaseWithStyles style = render
  where
  withStyles' :: ReactComponent InputBaseProps -> Effect.Effect (ReactComponent InputBaseProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _InputBase'

  render = map MUI.React.Basic.element styledComponent

foreign import data InputBaseProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputBaseReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputBasePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> InputBaseProps
props = unsafeCoerce
