{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Breadcrumbs where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_nav) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type BreadcrumbsClassesGenericRow a
  = ( li :: a
    , ol :: a
    , root :: a
    , separator :: a
    )

type BreadcrumbsClassesKey
  = BreadcrumbsClassesGenericRow String

type BreadcrumbsClassesJSS
  = BreadcrumbsClassesGenericRow JSS

type BreadcrumbsOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | BreadcrumbsClassesKey }
    , component :: Foreign.Foreign
    , expandText :: String
    , itemsAfterCollapse :: Number
    , itemsBeforeCollapse :: Number
    , maxItems :: Number
    , ref :: Foreign.Foreign
    , separator :: JSX
    | r
    )

type BreadcrumbsReqPropsRow (r :: # Type)
  = r

type BreadcrumbsPropsRow (r :: # Type)
  = BreadcrumbsOptPropsRow (BreadcrumbsReqPropsRow r)

foreign import _UnsafeBreadcrumbs :: forall componentProps. ReactComponent { | BreadcrumbsPropsRow componentProps }

_Breadcrumbs ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BreadcrumbsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BreadcrumbsPropsRow React.Basic.DOM.Props_nav) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Breadcrumbs = unsafeCoerce _UnsafeBreadcrumbs

breadcrumbs ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BreadcrumbsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BreadcrumbsPropsRow React.Basic.DOM.Props_nav) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
breadcrumbs ps = element _Breadcrumbs ps

breadcrumbs' :: BreadcrumbsProps -> JSX
breadcrumbs' = MUI.React.Basic.element _Breadcrumbs'

_Breadcrumbs' :: ReactComponent BreadcrumbsProps
_Breadcrumbs' = unsafeCoerce _UnsafeBreadcrumbs

breadcrumbsWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ BreadcrumbsClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (BreadcrumbsProps -> JSX)
breadcrumbsWithStyles style = render
  where
  withStyles' :: ReactComponent BreadcrumbsProps -> Effect.Effect (ReactComponent BreadcrumbsProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Breadcrumbs'

  render = map MUI.React.Basic.element styledComponent

foreign import data BreadcrumbsProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BreadcrumbsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BreadcrumbsPropsRow React.Basic.DOM.Props_nav) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> BreadcrumbsProps
props = unsafeCoerce
