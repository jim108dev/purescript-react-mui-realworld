{- This module was autogenerated. Please don't edit. -}
module MUI.Core.TableCell where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Padding :: Type

padding ::
  { checkbox :: Padding
  , default :: Padding
  , none :: Padding
  }
padding = { checkbox: unsafeCoerce "checkbox", default: unsafeCoerce "default", none: unsafeCoerce "none" }

foreign import data Size :: Type

size ::
  { medium :: Size
  , small :: Size
  }
size = { medium: unsafeCoerce "medium", small: unsafeCoerce "small" }

foreign import data SortDirection :: Type

sortDirection ::
  { asc :: SortDirection
  , desc :: SortDirection
  , "false" :: SortDirection
  }
sortDirection = { asc: unsafeCoerce "asc", desc: unsafeCoerce "desc", "false": unsafeCoerce false }

foreign import data Variant :: Type

variant ::
  { body :: Variant
  , footer :: Variant
  , head :: Variant
  }
variant = { body: unsafeCoerce "body", footer: unsafeCoerce "footer", head: unsafeCoerce "head" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqSortDirection :: Eq SortDirection where
  eq = unsafeRefEq

instance eqSize :: Eq Size where
  eq = unsafeRefEq

instance eqPadding :: Eq Padding where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type TableCellClassesGenericRow a
  = ( alignCenter :: a
    , alignJustify :: a
    , alignLeft :: a
    , alignRight :: a
    , body :: a
    , footer :: a
    , head :: a
    , paddingCheckbox :: a
    , paddingNone :: a
    , root :: a
    , sizeSmall :: a
    , stickyHeader :: a
    )

type TableCellClassesKey
  = TableCellClassesGenericRow String

type TableCellClassesJSS
  = TableCellClassesGenericRow JSS

type TableCellOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | TableCellClassesKey }
    , padding :: Padding
    , ref :: Foreign.Foreign
    , scope :: String
    , size :: Size
    , sortDirection :: SortDirection
    , variant :: Variant
    | r
    )

type TableCellReqPropsRow (r :: # Type)
  = r

type TableCellPropsRow (r :: # Type)
  = TableCellOptPropsRow (TableCellReqPropsRow r)

foreign import _UnsafeTableCell :: forall componentProps. ReactComponent { | TableCellPropsRow componentProps }

_TableCell ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableCellReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableCellPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_TableCell = unsafeCoerce _UnsafeTableCell

tableCell ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableCellReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableCellPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
tableCell ps = element _TableCell ps

tableCell' :: TableCellProps -> JSX
tableCell' = MUI.React.Basic.element _TableCell'

_TableCell' :: ReactComponent TableCellProps
_TableCell' = unsafeCoerce _UnsafeTableCell

tableCellWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ TableCellClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (TableCellProps -> JSX)
tableCellWithStyles style = render
  where
  withStyles' :: ReactComponent TableCellProps -> Effect.Effect (ReactComponent TableCellProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _TableCell'

  render = map MUI.React.Basic.element styledComponent

foreign import data TableCellProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableCellReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableCellPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> TableCellProps
props = unsafeCoerce
