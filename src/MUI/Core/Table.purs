{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Table where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Padding :: Type

padding ::
  { checkbox :: Padding
  , default :: Padding
  , none :: Padding
  }
padding = { checkbox: unsafeCoerce "checkbox", default: unsafeCoerce "default", none: unsafeCoerce "none" }

foreign import data Size :: Type

size ::
  { medium :: Size
  , small :: Size
  }
size = { medium: unsafeCoerce "medium", small: unsafeCoerce "small" }

instance eqSize :: Eq Size where
  eq = unsafeRefEq

instance eqPadding :: Eq Padding where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type TableClassesGenericRow a
  = ( root :: a
    , stickyHeader :: a
    )

type TableClassesKey
  = TableClassesGenericRow String

type TableClassesJSS
  = TableClassesGenericRow JSS

type TableOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | TableClassesKey }
    , padding :: Padding
    , ref :: Foreign.Foreign
    , size :: Size
    , stickyHeader :: Boolean
    | r
    )

type TableReqPropsRow (r :: # Type)
  = r

type TablePropsRow (r :: # Type)
  = TableOptPropsRow (TableReqPropsRow r)

foreign import _UnsafeTable :: forall componentProps. ReactComponent { | TablePropsRow componentProps }

_Table ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TablePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Table = unsafeCoerce _UnsafeTable

table ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TablePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
table ps = element _Table ps

table' :: TableProps -> JSX
table' = MUI.React.Basic.element _Table'

_Table' :: ReactComponent TableProps
_Table' = unsafeCoerce _UnsafeTable

tableWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ TableClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (TableProps -> JSX)
tableWithStyles style = render
  where
  withStyles' :: ReactComponent TableProps -> Effect.Effect (ReactComponent TableProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Table'

  render = map MUI.React.Basic.element styledComponent

foreign import data TableProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TablePropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> TableProps
props = unsafeCoerce
