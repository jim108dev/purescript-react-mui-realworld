{- This module was autogenerated. Please don't edit. -}
module MUI.Core.List where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_ul) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type ListClassesGenericRow a
  = ( dense :: a
    , padding :: a
    , root :: a
    , subheader :: a
    )

type ListClassesKey
  = ListClassesGenericRow String

type ListClassesJSS
  = ListClassesGenericRow JSS

type ListOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | ListClassesKey }
    , dense :: Boolean
    , disablePadding :: Boolean
    , subheader :: JSX
    | r
    )

type ListReqPropsRow (r :: # Type)
  = r

type ListPropsRow (r :: # Type)
  = ListOptPropsRow (ListReqPropsRow r)

foreign import _UnsafeList :: forall componentProps. ReactComponent { | ListPropsRow componentProps }

_List ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ListReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ListPropsRow React.Basic.DOM.Props_ul) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_List = unsafeCoerce _UnsafeList

list ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ListReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ListPropsRow React.Basic.DOM.Props_ul) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
list ps = element _List ps

list' :: ListProps -> JSX
list' = MUI.React.Basic.element _List'

_List' :: ReactComponent ListProps
_List' = unsafeCoerce _UnsafeList

listWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ ListClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (ListProps -> JSX)
listWithStyles style = render
  where
  withStyles' :: ReactComponent ListProps -> Effect.Effect (ReactComponent ListProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _List'

  render = map MUI.React.Basic.element styledComponent

foreign import data ListProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ListReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ListPropsRow React.Basic.DOM.Props_ul) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> ListProps
props = unsafeCoerce
