{- This module was autogenerated. Please don't edit. -}
module MUI.Core.TableRow where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type TableRowClassesGenericRow a
  = ( footer :: a
    , head :: a
    , hover :: a
    , root :: a
    , selected :: a
    )

type TableRowClassesKey
  = TableRowClassesGenericRow String

type TableRowClassesJSS
  = TableRowClassesGenericRow JSS

type TableRowOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | TableRowClassesKey }
    , hover :: Boolean
    , ref :: Foreign.Foreign
    , selected :: Boolean
    | r
    )

type TableRowReqPropsRow (r :: # Type)
  = r

type TableRowPropsRow (r :: # Type)
  = TableRowOptPropsRow (TableRowReqPropsRow r)

foreign import _UnsafeTableRow :: forall componentProps. ReactComponent { | TableRowPropsRow componentProps }

_TableRow ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableRowReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableRowPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_TableRow = unsafeCoerce _UnsafeTableRow

tableRow ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableRowReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableRowPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
tableRow ps = element _TableRow ps

tableRow' :: TableRowProps -> JSX
tableRow' = MUI.React.Basic.element _TableRow'

_TableRow' :: ReactComponent TableRowProps
_TableRow' = unsafeCoerce _UnsafeTableRow

tableRowWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ TableRowClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (TableRowProps -> JSX)
tableRowWithStyles style = render
  where
  withStyles' :: ReactComponent TableRowProps -> Effect.Effect (ReactComponent TableRowProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _TableRow'

  render = map MUI.React.Basic.element styledComponent

foreign import data TableRowProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableRowReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableRowPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> TableRowProps
props = unsafeCoerce
