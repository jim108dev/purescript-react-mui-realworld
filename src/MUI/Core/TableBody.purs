{- This module was autogenerated. Please don't edit. -}
module MUI.Core.TableBody where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type TableBodyClassesGenericRow a
  = ( root :: a
    )

type TableBodyClassesKey
  = TableBodyClassesGenericRow String

type TableBodyClassesJSS
  = TableBodyClassesGenericRow JSS

type TableBodyOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | TableBodyClassesKey }
    , ref :: Foreign.Foreign
    | r
    )

type TableBodyReqPropsRow (r :: # Type)
  = r

type TableBodyPropsRow (r :: # Type)
  = TableBodyOptPropsRow (TableBodyReqPropsRow r)

foreign import _UnsafeTableBody :: forall componentProps. ReactComponent { | TableBodyPropsRow componentProps }

_TableBody ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableBodyReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableBodyPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_TableBody = unsafeCoerce _UnsafeTableBody

tableBody ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableBodyReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableBodyPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
tableBody ps = element _TableBody ps

tableBody' :: TableBodyProps -> JSX
tableBody' = MUI.React.Basic.element _TableBody'

_TableBody' :: ReactComponent TableBodyProps
_TableBody' = unsafeCoerce _UnsafeTableBody

tableBodyWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ TableBodyClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (TableBodyProps -> JSX)
tableBodyWithStyles style = render
  where
  withStyles' :: ReactComponent TableBodyProps -> Effect.Effect (ReactComponent TableBodyProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _TableBody'

  render = map MUI.React.Basic.element styledComponent

foreign import data TableBodyProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableBodyReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableBodyPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> TableBodyProps
props = unsafeCoerce
