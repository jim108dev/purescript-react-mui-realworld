{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Toolbar where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Variant :: Type

variant ::
  { dense :: Variant
  , regular :: Variant
  }
variant = { dense: unsafeCoerce "dense", regular: unsafeCoerce "regular" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type ToolbarClassesGenericRow a
  = ( dense :: a
    , gutters :: a
    , regular :: a
    , root :: a
    )

type ToolbarClassesKey
  = ToolbarClassesGenericRow String

type ToolbarClassesJSS
  = ToolbarClassesGenericRow JSS

type ToolbarOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | ToolbarClassesKey }
    , disableGutters :: Boolean
    , variant :: Variant
    | r
    )

type ToolbarReqPropsRow (r :: # Type)
  = r

type ToolbarPropsRow (r :: # Type)
  = ToolbarOptPropsRow (ToolbarReqPropsRow r)

foreign import _UnsafeToolbar :: forall componentProps. ReactComponent { | ToolbarPropsRow componentProps }

_Toolbar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ToolbarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ToolbarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Toolbar = unsafeCoerce _UnsafeToolbar

toolbar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ToolbarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ToolbarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
toolbar ps = element _Toolbar ps

toolbar' :: ToolbarProps -> JSX
toolbar' = MUI.React.Basic.element _Toolbar'

_Toolbar' :: ReactComponent ToolbarProps
_Toolbar' = unsafeCoerce _UnsafeToolbar

toolbarWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ ToolbarClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (ToolbarProps -> JSX)
toolbarWithStyles style = render
  where
  withStyles' :: ReactComponent ToolbarProps -> Effect.Effect (ReactComponent ToolbarProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Toolbar'

  render = map MUI.React.Basic.element styledComponent

foreign import data ToolbarProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ToolbarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ToolbarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> ToolbarProps
props = unsafeCoerce
