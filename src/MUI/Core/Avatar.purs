{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Avatar where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Variant :: Type

variant ::
  { circle :: Variant
  , rounded :: Variant
  , square :: Variant
  }
variant = { circle: unsafeCoerce "circle", rounded: unsafeCoerce "rounded", square: unsafeCoerce "square" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type AvatarClassesGenericRow a
  = ( circle :: a
    , colorDefault :: a
    , fallback :: a
    , img :: a
    , root :: a
    , rounded :: a
    , square :: a
    )

type AvatarClassesKey
  = AvatarClassesGenericRow String

type AvatarClassesJSS
  = AvatarClassesGenericRow JSS

type AvatarOptPropsRow (r :: # Type)
  = ( alt :: String
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | AvatarClassesKey }
    , imgProps :: Foreign.Foreign
    , ref :: Foreign.Foreign
    , sizes :: String
    , src :: String
    , srcSet :: String
    , variant :: Variant
    | r
    )

type AvatarReqPropsRow (r :: # Type)
  = r

type AvatarPropsRow (r :: # Type)
  = AvatarOptPropsRow (AvatarReqPropsRow r)

foreign import _UnsafeAvatar :: forall componentProps. ReactComponent { | AvatarPropsRow componentProps }

_Avatar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AvatarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AvatarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Avatar = unsafeCoerce _UnsafeAvatar

avatar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AvatarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AvatarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
avatar ps = element _Avatar ps

avatar' :: AvatarProps -> JSX
avatar' = MUI.React.Basic.element _Avatar'

_Avatar' :: ReactComponent AvatarProps
_Avatar' = unsafeCoerce _UnsafeAvatar

avatarWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ AvatarClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (AvatarProps -> JSX)
avatarWithStyles style = render
  where
  withStyles' :: ReactComponent AvatarProps -> Effect.Effect (ReactComponent AvatarProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Avatar'

  render = map MUI.React.Basic.element styledComponent

foreign import data AvatarProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (AvatarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (AvatarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> AvatarProps
props = unsafeCoerce
