{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Container where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data MaxWidth :: Type

maxWidth ::
  { "false" :: MaxWidth
  , lg :: MaxWidth
  , md :: MaxWidth
  , sm :: MaxWidth
  , xl :: MaxWidth
  , xs :: MaxWidth
  }
maxWidth = { "false": unsafeCoerce false, lg: unsafeCoerce "lg", md: unsafeCoerce "md", sm: unsafeCoerce "sm", xl: unsafeCoerce "xl", xs: unsafeCoerce "xs" }

instance eqMaxWidth :: Eq MaxWidth where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type ContainerClassesGenericRow a
  = ( disableGutters :: a
    , fixed :: a
    , maxWidthLg :: a
    , maxWidthMd :: a
    , maxWidthSm :: a
    , maxWidthXl :: a
    , maxWidthXs :: a
    , root :: a
    )

type ContainerClassesKey
  = ContainerClassesGenericRow String

type ContainerClassesJSS
  = ContainerClassesGenericRow JSS

type ContainerOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , classes :: { | ContainerClassesKey }
    , disableGutters :: Boolean
    , fixed :: Boolean
    , maxWidth :: MaxWidth
    | r
    )

type ContainerReqPropsRow (r :: # Type)
  = r

type ContainerPropsRow (r :: # Type)
  = ContainerOptPropsRow (ContainerReqPropsRow r)

foreign import _UnsafeContainer :: forall componentProps. ReactComponent { | ContainerPropsRow componentProps }

_Container ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ContainerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ContainerPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Container = unsafeCoerce _UnsafeContainer

container ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ContainerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ContainerPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
container ps = element _Container ps

container' :: ContainerProps -> JSX
container' = MUI.React.Basic.element _Container'

_Container' :: ReactComponent ContainerProps
_Container' = unsafeCoerce _UnsafeContainer

containerWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ ContainerClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (ContainerProps -> JSX)
containerWithStyles style = render
  where
  withStyles' :: ReactComponent ContainerProps -> Effect.Effect (ReactComponent ContainerProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Container'

  render = map MUI.React.Basic.element styledComponent

foreign import data ContainerProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ContainerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ContainerPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> ContainerProps
props = unsafeCoerce
