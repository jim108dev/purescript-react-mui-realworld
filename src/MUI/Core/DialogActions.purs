{- This module was autogenerated. Please don't edit. -}
module MUI.Core.DialogActions where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type DialogActionsClassesGenericRow a
  = ( root :: a
    , spacing :: a
    )

type DialogActionsClassesKey
  = DialogActionsClassesGenericRow String

type DialogActionsClassesJSS
  = DialogActionsClassesGenericRow JSS

type DialogActionsOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | DialogActionsClassesKey }
    , disableSpacing :: Boolean
    , ref :: Foreign.Foreign
    | r
    )

type DialogActionsReqPropsRow (r :: # Type)
  = r

type DialogActionsPropsRow (r :: # Type)
  = DialogActionsOptPropsRow (DialogActionsReqPropsRow r)

foreign import _UnsafeDialogActions :: forall componentProps. ReactComponent { | DialogActionsPropsRow componentProps }

_DialogActions ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DialogActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DialogActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_DialogActions = unsafeCoerce _UnsafeDialogActions

dialogActions ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DialogActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DialogActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
dialogActions ps = element _DialogActions ps

dialogActions' :: DialogActionsProps -> JSX
dialogActions' = MUI.React.Basic.element _DialogActions'

_DialogActions' :: ReactComponent DialogActionsProps
_DialogActions' = unsafeCoerce _UnsafeDialogActions

dialogActionsWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ DialogActionsClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (DialogActionsProps -> JSX)
dialogActionsWithStyles style = render
  where
  withStyles' :: ReactComponent DialogActionsProps -> Effect.Effect (ReactComponent DialogActionsProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _DialogActions'

  render = map MUI.React.Basic.element styledComponent

foreign import data DialogActionsProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DialogActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DialogActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> DialogActionsProps
props = unsafeCoerce
