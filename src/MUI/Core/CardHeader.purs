{- This module was autogenerated. Please don't edit. -}
module MUI.Core.CardHeader where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.Core.Typography (TypographyProps) as MUI.Core.Typography
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type CardHeaderClassesGenericRow a
  = ( action :: a
    , avatar :: a
    , content :: a
    , root :: a
    , subheader :: a
    , title :: a
    )

type CardHeaderClassesKey
  = CardHeaderClassesGenericRow String

type CardHeaderClassesJSS
  = CardHeaderClassesGenericRow JSS

type CardHeaderOptPropsRow (r :: # Type)
  = ( action :: JSX
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , avatar :: JSX
    , children :: Array JSX
    , classes :: { | CardHeaderClassesKey }
    , disableTypography :: Boolean
    , subheader :: JSX
    , subheaderTypographyProps :: MUI.Core.Typography.TypographyProps
    , title :: JSX
    , titleTypographyProps :: MUI.Core.Typography.TypographyProps
    | r
    )

type CardHeaderReqPropsRow (r :: # Type)
  = r

type CardHeaderPropsRow (r :: # Type)
  = CardHeaderOptPropsRow (CardHeaderReqPropsRow r)

foreign import _UnsafeCardHeader :: forall componentProps. ReactComponent { | CardHeaderPropsRow componentProps }

_CardHeader ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardHeaderReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardHeaderPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_CardHeader = unsafeCoerce _UnsafeCardHeader

cardHeader ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardHeaderReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardHeaderPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
cardHeader ps = element _CardHeader ps

cardHeader' :: CardHeaderProps -> JSX
cardHeader' = MUI.React.Basic.element _CardHeader'

_CardHeader' :: ReactComponent CardHeaderProps
_CardHeader' = unsafeCoerce _UnsafeCardHeader

cardHeaderWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ CardHeaderClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (CardHeaderProps -> JSX)
cardHeaderWithStyles style = render
  where
  withStyles' :: ReactComponent CardHeaderProps -> Effect.Effect (ReactComponent CardHeaderProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _CardHeader'

  render = map MUI.React.Basic.element styledComponent

foreign import data CardHeaderProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardHeaderReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardHeaderPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> CardHeaderProps
props = unsafeCoerce
