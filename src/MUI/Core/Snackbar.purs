{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Snackbar where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Horizontal :: Type

horizontal ::
  { center :: Horizontal
  , left :: Horizontal
  , right :: Horizontal
  }
horizontal = { center: unsafeCoerce "center", left: unsafeCoerce "left", right: unsafeCoerce "right" }

foreign import data TransitionDuration :: Type

transitionDuration ::
  { number :: Number -> TransitionDuration
  , record :: { appear :: Number, enter :: Number, exit :: Number } -> TransitionDuration
  , record1 :: { appear :: Number, enter :: Number, exit :: Number } -> TransitionDuration
  }
transitionDuration = { number: unsafeCoerce, record: unsafeCoerce, record1: unsafeCoerce }

foreign import data Vertical :: Type

vertical ::
  { bottom :: Vertical
  , top :: Vertical
  }
vertical = { bottom: unsafeCoerce "bottom", top: unsafeCoerce "top" }

instance eqVertical :: Eq Vertical where
  eq = unsafeRefEq

instance eqHorizontal :: Eq Horizontal where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type SnackbarClassesGenericRow a
  = ( anchorOriginBottomCenter :: a
    , anchorOriginBottomLeft :: a
    , anchorOriginBottomRight :: a
    , anchorOriginTopCenter :: a
    , anchorOriginTopLeft :: a
    , anchorOriginTopRight :: a
    , root :: a
    )

type SnackbarClassesKey
  = SnackbarClassesGenericRow String

type SnackbarClassesJSS
  = SnackbarClassesGenericRow JSS

type SnackbarOptPropsRow (r :: # Type)
  = ( "ClickAwayListenerProps" :: Foreign.Foreign
    , "ContentProps" :: Foreign.Foreign
    , "TransitionComponent" :: Foreign.Foreign
    , "TransitionProps" :: Foreign.Foreign
    , action :: JSX
    , anchorOrigin :: { horizontal :: Horizontal, vertical :: Vertical }
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , autoHideDuration :: Number
    , children :: Array JSX
    , classes :: { | SnackbarClassesKey }
    , disableWindowBlurListener :: Boolean
    , key :: Foreign.Foreign
    , message :: JSX
    , onClose :: React.Basic.Events.EventHandler
    , onEnter :: React.Basic.Events.EventHandler
    , onEntered :: React.Basic.Events.EventHandler
    , onEntering :: React.Basic.Events.EventHandler
    , onExit :: React.Basic.Events.EventHandler
    , onExited :: React.Basic.Events.EventHandler
    , onExiting :: React.Basic.Events.EventHandler
    , open :: Boolean
    , ref :: Foreign.Foreign
    , resumeHideDuration :: Number
    , transitionDuration :: TransitionDuration
    | r
    )

type SnackbarReqPropsRow (r :: # Type)
  = r

type SnackbarPropsRow (r :: # Type)
  = SnackbarOptPropsRow (SnackbarReqPropsRow r)

foreign import _UnsafeSnackbar :: forall componentProps. ReactComponent { | SnackbarPropsRow componentProps }

_Snackbar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (SnackbarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (SnackbarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Snackbar = unsafeCoerce _UnsafeSnackbar

snackbar ::
  forall given optionalGiven optionalMissing props required.
  Nub' (SnackbarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (SnackbarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
snackbar ps = element _Snackbar ps

snackbar' :: SnackbarProps -> JSX
snackbar' = MUI.React.Basic.element _Snackbar'

_Snackbar' :: ReactComponent SnackbarProps
_Snackbar' = unsafeCoerce _UnsafeSnackbar

snackbarWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ SnackbarClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (SnackbarProps -> JSX)
snackbarWithStyles style = render
  where
  withStyles' :: ReactComponent SnackbarProps -> Effect.Effect (ReactComponent SnackbarProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Snackbar'

  render = map MUI.React.Basic.element styledComponent

foreign import data SnackbarProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (SnackbarReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (SnackbarPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> SnackbarProps
props = unsafeCoerce
