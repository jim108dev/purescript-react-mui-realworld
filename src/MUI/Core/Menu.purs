{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Menu where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data TransitionDuration :: Type

transitionDuration ::
  { auto :: TransitionDuration
  , number :: Number -> TransitionDuration
  , record :: { appear :: Number, enter :: Number, exit :: Number } -> TransitionDuration
  , record1 :: { appear :: Number, enter :: Number, exit :: Number } -> TransitionDuration
  }
transitionDuration = { auto: unsafeCoerce "auto", number: unsafeCoerce, record: unsafeCoerce, record1: unsafeCoerce }

foreign import data Variant :: Type

variant ::
  { menu :: Variant
  , selectedMenu :: Variant
  }
variant = { menu: unsafeCoerce "menu", selectedMenu: unsafeCoerce "selectedMenu" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type MenuClassesGenericRow a
  = ( list :: a
    , paper :: a
    )

type MenuClassesKey
  = MenuClassesGenericRow String

type MenuClassesJSS
  = MenuClassesGenericRow JSS

type MenuOptPropsRow (r :: # Type)
  = ( "MenuListProps" :: Foreign.Foreign
    , "PopoverClasses" :: Foreign.Foreign
    , anchorEl :: Foreign.Foreign
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , autoFocus :: Boolean
    , children :: Array JSX
    , classes :: { | MenuClassesKey }
    , disableAutoFocusItem :: Boolean
    , onClose :: React.Basic.Events.EventHandler
    , onEnter :: React.Basic.Events.EventHandler
    , onEntered :: React.Basic.Events.EventHandler
    , onEntering :: React.Basic.Events.EventHandler
    , onExit :: React.Basic.Events.EventHandler
    , onExited :: React.Basic.Events.EventHandler
    , onExiting :: React.Basic.Events.EventHandler
    , ref :: Foreign.Foreign
    , transitionDuration :: TransitionDuration
    , variant :: Variant
    | r
    )

type MenuReqPropsRow (r :: # Type)
  = ( open :: Boolean
    | r
    )

type MenuPropsRow (r :: # Type)
  = MenuOptPropsRow (MenuReqPropsRow r)

foreign import _UnsafeMenu :: forall componentProps. ReactComponent { | MenuPropsRow componentProps }

_Menu ::
  forall given optionalGiven optionalMissing props required.
  Nub' (MenuReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (MenuPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Menu = unsafeCoerce _UnsafeMenu

menu ::
  forall given optionalGiven optionalMissing props required.
  Nub' (MenuReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (MenuPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
menu ps = element _Menu ps

menu' :: MenuProps -> JSX
menu' = MUI.React.Basic.element _Menu'

_Menu' :: ReactComponent MenuProps
_Menu' = unsafeCoerce _UnsafeMenu

menuWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ MenuClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (MenuProps -> JSX)
menuWithStyles style = render
  where
  withStyles' :: ReactComponent MenuProps -> Effect.Effect (ReactComponent MenuProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Menu'

  render = map MUI.React.Basic.element styledComponent

foreign import data MenuProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (MenuReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (MenuPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> MenuProps
props = unsafeCoerce
