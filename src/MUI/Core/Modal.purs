{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Modal where

import Foreign (Foreign) as Foreign
import MUI.Core (class Nub')
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type ModalOptPropsRow (r :: # Type)
  = ( "BackdropComponent" :: Foreign.Foreign
    , "BackdropProps" :: Foreign.Foreign
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , closeAfterTransition :: Boolean
    , disableAutoFocus :: Boolean
    , disableBackdropClick :: Boolean
    , disableEnforceFocus :: Boolean
    , disableEscapeKeyDown :: Boolean
    , disablePortal :: Boolean
    , disableRestoreFocus :: Boolean
    , disableScrollLock :: Boolean
    , hideBackdrop :: Boolean
    , keepMounted :: Boolean
    , onBackdropClick :: React.Basic.Events.EventHandler
    , onClose :: React.Basic.Events.EventHandler
    , onEscapeKeyDown :: React.Basic.Events.EventHandler
    , onRendered :: React.Basic.Events.EventHandler
    | r
    )

type ModalReqPropsRow (r :: # Type)
  = ( children :: JSX
    , open :: Boolean
    | r
    )

type ModalPropsRow (r :: # Type)
  = ModalOptPropsRow (ModalReqPropsRow r)

foreign import _UnsafeModal :: forall componentProps. ReactComponent { | ModalPropsRow componentProps }

_Modal ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ModalReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ModalPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Modal = unsafeCoerce _UnsafeModal

modal ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ModalReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ModalPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
modal ps = element _Modal ps

modal' :: ModalProps -> JSX
modal' = MUI.React.Basic.element _Modal'

_Modal' :: ReactComponent ModalProps
_Modal' = unsafeCoerce _UnsafeModal

foreign import data ModalProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (ModalReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (ModalPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> ModalProps
props = unsafeCoerce
