{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Input where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.InputBase (InputBasePropsRow, InputBaseReqPropsRow) as MUI.Core.InputBase
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import React.Basic.Events (EventHandler) as React.Basic.Events
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Color :: Type

color ::
  { primary :: Color
  , secondary :: Color
  }
color = { primary: unsafeCoerce "primary", secondary: unsafeCoerce "secondary" }

foreign import data Margin :: Type

margin ::
  { dense :: Margin
  , none :: Margin
  }
margin = { dense: unsafeCoerce "dense", none: unsafeCoerce "none" }

foreign import data Rows :: Type

rows ::
  { number :: Number -> Rows
  , string :: String -> Rows
  }
rows = { number: unsafeCoerce, string: unsafeCoerce }

foreign import data RowsMax :: Type

rowsMax ::
  { number :: Number -> RowsMax
  , string :: String -> RowsMax
  }
rowsMax = { number: unsafeCoerce, string: unsafeCoerce }

instance eqMargin :: Eq Margin where
  eq = unsafeRefEq

instance eqColor :: Eq Color where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type InputClassesGenericRow a
  = ( colorSecondary :: a
    , disabled :: a
    , error :: a
    , focused :: a
    , formControl :: a
    , fullWidth :: a
    , input :: a
    , inputMarginDense :: a
    , inputMultiline :: a
    , inputTypeSearch :: a
    , marginDense :: a
    , multiline :: a
    , root :: a
    , underline :: a
    )

type InputClassesKey
  = InputClassesGenericRow String

type InputClassesJSS
  = InputClassesGenericRow JSS

type InputOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , autoComplete :: String
    , autoFocus :: Boolean
    , className :: String
    , classes :: { | InputClassesKey }
    , color :: Color
    , defaultValue :: Foreign.Foreign
    , disabled :: Boolean
    , endAdornment :: JSX
    , error :: Boolean
    , fullWidth :: Boolean
    , id :: String
    , inputProps :: Foreign.Foreign
    , inputRef :: Foreign.Foreign
    , margin :: Margin
    , multiline :: Boolean
    , name :: String
    , onChange :: React.Basic.Events.EventHandler
    , placeholder :: String
    , readOnly :: Boolean
    , required :: Boolean
    , rows :: Rows
    , rowsMax :: RowsMax
    , startAdornment :: JSX
    , "type" :: String
    , value :: Foreign.Foreign
    | r
    )

type InputReqPropsRow (r :: # Type)
  = r

type InputPropsRow (r :: # Type)
  = InputOptPropsRow (InputReqPropsRow r)

foreign import _UnsafeInput :: forall componentProps. ReactComponent { | InputPropsRow componentProps }

_Input ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputReqPropsRow (MUI.Core.InputBase.InputBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputPropsRow (MUI.Core.InputBase.InputBasePropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Input = unsafeCoerce _UnsafeInput

input ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputReqPropsRow (MUI.Core.InputBase.InputBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputPropsRow (MUI.Core.InputBase.InputBasePropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
input ps = element _Input ps

input' :: InputProps -> JSX
input' = MUI.React.Basic.element _Input'

_Input' :: ReactComponent InputProps
_Input' = unsafeCoerce _UnsafeInput

inputWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ InputClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (InputProps -> JSX)
inputWithStyles style = render
  where
  withStyles' :: ReactComponent InputProps -> Effect.Effect (ReactComponent InputProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Input'

  render = map MUI.React.Basic.element styledComponent

foreign import data InputProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (InputReqPropsRow (MUI.Core.InputBase.InputBaseReqPropsRow ())) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (InputPropsRow (MUI.Core.InputBase.InputBasePropsRow React.Basic.DOM.Props_div)) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> InputProps
props = unsafeCoerce
