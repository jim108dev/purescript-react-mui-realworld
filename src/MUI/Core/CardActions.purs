{- This module was autogenerated. Please don't edit. -}
module MUI.Core.CardActions where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type CardActionsClassesGenericRow a
  = ( root :: a
    , spacing :: a
    )

type CardActionsClassesKey
  = CardActionsClassesGenericRow String

type CardActionsClassesJSS
  = CardActionsClassesGenericRow JSS

type CardActionsOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | CardActionsClassesKey }
    , disableSpacing :: Boolean
    | r
    )

type CardActionsReqPropsRow (r :: # Type)
  = r

type CardActionsPropsRow (r :: # Type)
  = CardActionsOptPropsRow (CardActionsReqPropsRow r)

foreign import _UnsafeCardActions :: forall componentProps. ReactComponent { | CardActionsPropsRow componentProps }

_CardActions ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_CardActions = unsafeCoerce _UnsafeCardActions

cardActions ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
cardActions ps = element _CardActions ps

cardActions' :: CardActionsProps -> JSX
cardActions' = MUI.React.Basic.element _CardActions'

_CardActions' :: ReactComponent CardActionsProps
_CardActions' = unsafeCoerce _UnsafeCardActions

cardActionsWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ CardActionsClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (CardActionsProps -> JSX)
cardActionsWithStyles style = render
  where
  withStyles' :: ReactComponent CardActionsProps -> Effect.Effect (ReactComponent CardActionsProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _CardActions'

  render = map MUI.React.Basic.element styledComponent

foreign import data CardActionsProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CardActionsReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CardActionsPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> CardActionsProps
props = unsafeCoerce
