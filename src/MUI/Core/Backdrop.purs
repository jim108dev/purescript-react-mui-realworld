{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Backdrop where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import MUI.React.TransitionGroup (Timeout) as MUI.React.TransitionGroup
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type BackdropClassesGenericRow a
  = ( invisible :: a
    , root :: a
    )

type BackdropClassesKey
  = BackdropClassesGenericRow String

type BackdropClassesJSS
  = BackdropClassesGenericRow JSS

type BackdropOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | BackdropClassesKey }
    , invisible :: Boolean
    , ref :: Foreign.Foreign
    , transitionDuration :: MUI.React.TransitionGroup.Timeout
    | r
    )

type BackdropReqPropsRow (r :: # Type)
  = ( open :: Boolean
    | r
    )

type BackdropPropsRow (r :: # Type)
  = BackdropOptPropsRow (BackdropReqPropsRow r)

foreign import _UnsafeBackdrop :: forall componentProps. ReactComponent { | BackdropPropsRow componentProps }

_Backdrop ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BackdropReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BackdropPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Backdrop = unsafeCoerce _UnsafeBackdrop

backdrop ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BackdropReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BackdropPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
backdrop ps = element _Backdrop ps

backdrop' :: BackdropProps -> JSX
backdrop' = MUI.React.Basic.element _Backdrop'

_Backdrop' :: ReactComponent BackdropProps
_Backdrop' = unsafeCoerce _UnsafeBackdrop

backdropWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ BackdropClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (BackdropProps -> JSX)
backdropWithStyles style = render
  where
  withStyles' :: ReactComponent BackdropProps -> Effect.Effect (ReactComponent BackdropProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Backdrop'

  render = map MUI.React.Basic.element styledComponent

foreign import data BackdropProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (BackdropReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (BackdropPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> BackdropProps
props = unsafeCoerce
