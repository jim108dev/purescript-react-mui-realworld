{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Divider where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_hr) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Orientation :: Type

orientation ::
  { horizontal :: Orientation
  , vertical :: Orientation
  }
orientation = { horizontal: unsafeCoerce "horizontal", vertical: unsafeCoerce "vertical" }

foreign import data Variant :: Type

variant ::
  { fullWidth :: Variant
  , inset :: Variant
  , middle :: Variant
  }
variant = { fullWidth: unsafeCoerce "fullWidth", inset: unsafeCoerce "inset", middle: unsafeCoerce "middle" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqOrientation :: Eq Orientation where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type DividerClassesGenericRow a
  = ( absolute :: a
    , inset :: a
    , light :: a
    , middle :: a
    , root :: a
    , vertical :: a
    )

type DividerClassesKey
  = DividerClassesGenericRow String

type DividerClassesJSS
  = DividerClassesGenericRow JSS

type DividerOptPropsRow (r :: # Type)
  = ( absolute :: Boolean
    , "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , classes :: { | DividerClassesKey }
    , light :: Boolean
    , orientation :: Orientation
    , variant :: Variant
    | r
    )

type DividerReqPropsRow (r :: # Type)
  = r

type DividerPropsRow (r :: # Type)
  = DividerOptPropsRow (DividerReqPropsRow r)

foreign import _UnsafeDivider :: forall componentProps. ReactComponent { | DividerPropsRow componentProps }

_Divider ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DividerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DividerPropsRow React.Basic.DOM.Props_hr) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Divider = unsafeCoerce _UnsafeDivider

divider ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DividerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DividerPropsRow React.Basic.DOM.Props_hr) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
divider ps = element _Divider ps

divider' :: DividerProps -> JSX
divider' = MUI.React.Basic.element _Divider'

_Divider' :: ReactComponent DividerProps
_Divider' = unsafeCoerce _UnsafeDivider

dividerWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ DividerClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (DividerProps -> JSX)
dividerWithStyles style = render
  where
  withStyles' :: ReactComponent DividerProps -> Effect.Effect (ReactComponent DividerProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Divider'

  render = map MUI.React.Basic.element styledComponent

foreign import data DividerProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (DividerReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (DividerPropsRow React.Basic.DOM.Props_hr) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> DividerProps
props = unsafeCoerce
