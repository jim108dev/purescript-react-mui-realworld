{- This module was autogenerated. Please don't edit. -}
module MUI.Core.CircularProgress where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

foreign import data Color :: Type

color ::
  { inherit :: Color
  , primary :: Color
  , secondary :: Color
  }
color = { inherit: unsafeCoerce "inherit", primary: unsafeCoerce "primary", secondary: unsafeCoerce "secondary" }

foreign import data Size :: Type

size ::
  { number :: Number -> Size
  , string :: String -> Size
  }
size = { number: unsafeCoerce, string: unsafeCoerce }

foreign import data Variant :: Type

variant ::
  { determinate :: Variant
  , indeterminate :: Variant
  , static :: Variant
  }
variant = { determinate: unsafeCoerce "determinate", indeterminate: unsafeCoerce "indeterminate", static: unsafeCoerce "static" }

instance eqVariant :: Eq Variant where
  eq = unsafeRefEq

instance eqColor :: Eq Color where
  eq = unsafeRefEq

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type CircularProgressClassesGenericRow a
  = ( circle :: a
    , circleDisableShrink :: a
    , circleIndeterminate :: a
    , circleStatic :: a
    , colorPrimary :: a
    , colorSecondary :: a
    , indeterminate :: a
    , root :: a
    , static :: a
    , svg :: a
    )

type CircularProgressClassesKey
  = CircularProgressClassesGenericRow String

type CircularProgressClassesJSS
  = CircularProgressClassesGenericRow JSS

type CircularProgressOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , classes :: { | CircularProgressClassesKey }
    , color :: Color
    , disableShrink :: Boolean
    , ref :: Foreign.Foreign
    , size :: Size
    , thickness :: Number
    , value :: Number
    , variant :: Variant
    | r
    )

type CircularProgressReqPropsRow (r :: # Type)
  = r

type CircularProgressPropsRow (r :: # Type)
  = CircularProgressOptPropsRow (CircularProgressReqPropsRow r)

foreign import _UnsafeCircularProgress :: forall componentProps. ReactComponent { | CircularProgressPropsRow componentProps }

_CircularProgress ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CircularProgressReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CircularProgressPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_CircularProgress = unsafeCoerce _UnsafeCircularProgress

circularProgress ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CircularProgressReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CircularProgressPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
circularProgress ps = element _CircularProgress ps

circularProgress' :: CircularProgressProps -> JSX
circularProgress' = MUI.React.Basic.element _CircularProgress'

_CircularProgress' :: ReactComponent CircularProgressProps
_CircularProgress' = unsafeCoerce _UnsafeCircularProgress

circularProgressWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ CircularProgressClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (CircularProgressProps -> JSX)
circularProgressWithStyles style = render
  where
  withStyles' :: ReactComponent CircularProgressProps -> Effect.Effect (ReactComponent CircularProgressProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _CircularProgress'

  render = map MUI.React.Basic.element styledComponent

foreign import data CircularProgressProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (CircularProgressReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (CircularProgressPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> CircularProgressProps
props = unsafeCoerce
