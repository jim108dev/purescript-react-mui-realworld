{- This module was autogenerated. Please don't edit. -}
module MUI.Core.TableHead where

import Effect (Effect) as Effect
import Foreign (Foreign) as Foreign
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AriaHaspopup :: Type

ariaHaspopup ::
  { dialog :: AriaHaspopup
  , "false" :: AriaHaspopup
  , grid :: AriaHaspopup
  , listbox :: AriaHaspopup
  , menu :: AriaHaspopup
  , tree :: AriaHaspopup
  , "true" :: AriaHaspopup
  }
ariaHaspopup = { dialog: unsafeCoerce "dialog", "false": unsafeCoerce "false", grid: unsafeCoerce "grid", listbox: unsafeCoerce "listbox", menu: unsafeCoerce "menu", tree: unsafeCoerce "tree", "true": unsafeCoerce "true" }

instance eqAriaHaspopup :: Eq AriaHaspopup where
  eq = unsafeRefEq

type TableHeadClassesGenericRow a
  = ( root :: a
    )

type TableHeadClassesKey
  = TableHeadClassesGenericRow String

type TableHeadClassesJSS
  = TableHeadClassesGenericRow JSS

type TableHeadOptPropsRow (r :: # Type)
  = ( "aria-controls" :: String
    , "aria-haspopup" :: AriaHaspopup
    , children :: Array JSX
    , classes :: { | TableHeadClassesKey }
    , ref :: Foreign.Foreign
    | r
    )

type TableHeadReqPropsRow (r :: # Type)
  = r

type TableHeadPropsRow (r :: # Type)
  = TableHeadOptPropsRow (TableHeadReqPropsRow r)

foreign import _UnsafeTableHead :: forall componentProps. ReactComponent { | TableHeadPropsRow componentProps }

_TableHead ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableHeadReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableHeadPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_TableHead = unsafeCoerce _UnsafeTableHead

tableHead ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableHeadReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableHeadPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
tableHead ps = element _TableHead ps

tableHead' :: TableHeadProps -> JSX
tableHead' = MUI.React.Basic.element _TableHead'

_TableHead' :: ReactComponent TableHeadProps
_TableHead' = unsafeCoerce _UnsafeTableHead

tableHeadWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ TableHeadClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (TableHeadProps -> JSX)
tableHeadWithStyles style = render
  where
  withStyles' :: ReactComponent TableHeadProps -> Effect.Effect (ReactComponent TableHeadProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _TableHead'

  render = map MUI.React.Basic.element styledComponent

foreign import data TableHeadProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (TableHeadReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (TableHeadPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> TableHeadProps
props = unsafeCoerce
