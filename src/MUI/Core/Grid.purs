{- This module was autogenerated. Please don't edit. -}
module MUI.Core.Grid where

import Effect (Effect) as Effect
import MUI.Core (JSS, class Nub')
import MUI.Core.Styles (Theme, withStyles) as MUI.Core.Styles
import MUI.React.Basic (element) as MUI.React.Basic
import Prelude
import Prim.Row (class Union) as Prim.Row
import React.Basic (JSX, ReactComponent, element)
import React.Basic.DOM (Props_div) as React.Basic.DOM
import Unsafe.Coerce (unsafeCoerce)
import Unsafe.Reference (unsafeRefEq)

foreign import data AlignContent :: Type

alignContent ::
  { "FlexEnd" :: AlignContent
  , "FlexStart" :: AlignContent
  , "SpaceAround" :: AlignContent
  , "SpaceBetween" :: AlignContent
  , center :: AlignContent
  , stretch :: AlignContent
  }
alignContent = { "FlexEnd": unsafeCoerce "flex-end", "FlexStart": unsafeCoerce "flex-start", "SpaceAround": unsafeCoerce "space-around", "SpaceBetween": unsafeCoerce "space-between", center: unsafeCoerce "center", stretch: unsafeCoerce "stretch" }

foreign import data AlignItems :: Type

alignItems ::
  { "FlexEnd" :: AlignItems
  , "FlexStart" :: AlignItems
  , baseline :: AlignItems
  , center :: AlignItems
  , stretch :: AlignItems
  }
alignItems = { "FlexEnd": unsafeCoerce "flex-end", "FlexStart": unsafeCoerce "flex-start", baseline: unsafeCoerce "baseline", center: unsafeCoerce "center", stretch: unsafeCoerce "stretch" }

foreign import data Direction :: Type

direction ::
  { "ColumnReverse" :: Direction
  , "RowReverse" :: Direction
  , column :: Direction
  , row :: Direction
  }
direction = { "ColumnReverse": unsafeCoerce "column-reverse", "RowReverse": unsafeCoerce "row-reverse", column: unsafeCoerce "column", row: unsafeCoerce "row" }

foreign import data GridJustification :: Type

gridJustification ::
  { "FlexEnd" :: GridJustification
  , "FlexStart" :: GridJustification
  , "SpaceAround" :: GridJustification
  , "SpaceBetween" :: GridJustification
  , "SpaceEvenly" :: GridJustification
  , center :: GridJustification
  }
gridJustification = { "FlexEnd": unsafeCoerce "flex-end", "FlexStart": unsafeCoerce "flex-start", "SpaceAround": unsafeCoerce "space-around", "SpaceBetween": unsafeCoerce "space-between", "SpaceEvenly": unsafeCoerce "space-evenly", center: unsafeCoerce "center" }

foreign import data GridSize :: Type

gridSize ::
  { auto :: GridSize
  , eight :: GridSize
  , eleven :: GridSize
  , "false" :: GridSize
  , five :: GridSize
  , four :: GridSize
  , nine :: GridSize
  , one :: GridSize
  , seven :: GridSize
  , six :: GridSize
  , ten :: GridSize
  , three :: GridSize
  , "true" :: GridSize
  , twelve :: GridSize
  , two :: GridSize
  }
gridSize = { auto: unsafeCoerce "auto", eight: unsafeCoerce 8.0, eleven: unsafeCoerce 11.0, "false": unsafeCoerce false, five: unsafeCoerce 5.0, four: unsafeCoerce 4.0, nine: unsafeCoerce 9.0, one: unsafeCoerce 1.0, seven: unsafeCoerce 7.0, six: unsafeCoerce 6.0, ten: unsafeCoerce 10.0, three: unsafeCoerce 3.0, "true": unsafeCoerce true, twelve: unsafeCoerce 12.0, two: unsafeCoerce 2.0 }

foreign import data GridSpacing :: Type

gridSpacing ::
  { eight :: GridSpacing
  , five :: GridSpacing
  , four :: GridSpacing
  , nine :: GridSpacing
  , one :: GridSpacing
  , seven :: GridSpacing
  , six :: GridSpacing
  , ten :: GridSpacing
  , three :: GridSpacing
  , two :: GridSpacing
  , zero :: GridSpacing
  }
gridSpacing = { eight: unsafeCoerce 8.0, five: unsafeCoerce 5.0, four: unsafeCoerce 4.0, nine: unsafeCoerce 9.0, one: unsafeCoerce 1.0, seven: unsafeCoerce 7.0, six: unsafeCoerce 6.0, ten: unsafeCoerce 10.0, three: unsafeCoerce 3.0, two: unsafeCoerce 2.0, zero: unsafeCoerce 0.0 }

foreign import data Wrap :: Type

wrap ::
  { "WrapReverse" :: Wrap
  , nowrap :: Wrap
  , wrap :: Wrap
  }
wrap = { "WrapReverse": unsafeCoerce "wrap-reverse", nowrap: unsafeCoerce "nowrap", wrap: unsafeCoerce "wrap" }

instance eqWrap :: Eq Wrap where
  eq = unsafeRefEq

instance eqGridSpacing :: Eq GridSpacing where
  eq = unsafeRefEq

instance eqGridSize :: Eq GridSize where
  eq = unsafeRefEq

instance eqGridJustification :: Eq GridJustification where
  eq = unsafeRefEq

instance eqDirection :: Eq Direction where
  eq = unsafeRefEq

instance eqAlignItems :: Eq AlignItems where
  eq = unsafeRefEq

instance eqAlignContent :: Eq AlignContent where
  eq = unsafeRefEq

type GridClassesGenericRow a
  = ( "align-content-xs-center" :: a
    , "align-content-xs-flex-end" :: a
    , "align-content-xs-flex-start" :: a
    , "align-content-xs-space-around" :: a
    , "align-content-xs-space-between" :: a
    , "align-items-xs-baseline" :: a
    , "align-items-xs-center" :: a
    , "align-items-xs-flex-end" :: a
    , "align-items-xs-flex-start" :: a
    , container :: a
    , "direction-xs-column" :: a
    , "direction-xs-column-reverse" :: a
    , "direction-xs-row-reverse" :: a
    , "grid-xs-1" :: a
    , "grid-xs-10" :: a
    , "grid-xs-11" :: a
    , "grid-xs-12" :: a
    , "grid-xs-2" :: a
    , "grid-xs-3" :: a
    , "grid-xs-4" :: a
    , "grid-xs-5" :: a
    , "grid-xs-6" :: a
    , "grid-xs-7" :: a
    , "grid-xs-8" :: a
    , "grid-xs-9" :: a
    , "grid-xs-auto" :: a
    , "grid-xs-true" :: a
    , item :: a
    , "justify-xs-center" :: a
    , "justify-xs-flex-end" :: a
    , "justify-xs-space-around" :: a
    , "justify-xs-space-between" :: a
    , "justify-xs-space-evenly" :: a
    , root :: a
    , "spacing-xs-1" :: a
    , "spacing-xs-10" :: a
    , "spacing-xs-2" :: a
    , "spacing-xs-3" :: a
    , "spacing-xs-4" :: a
    , "spacing-xs-5" :: a
    , "spacing-xs-6" :: a
    , "spacing-xs-7" :: a
    , "spacing-xs-8" :: a
    , "spacing-xs-9" :: a
    , "wrap-xs-nowrap" :: a
    , "wrap-xs-wrap-reverse" :: a
    , zeroMinWidth :: a
    )

type GridClassesKey
  = GridClassesGenericRow String

type GridClassesJSS
  = GridClassesGenericRow JSS

type GridOptPropsRow (r :: # Type)
  = ( alignContent :: AlignContent
    , alignItems :: AlignItems
    , children :: Array JSX
    , classes :: { | GridClassesKey }
    , container :: Boolean
    , direction :: Direction
    , item :: Boolean
    , justify :: GridJustification
    , lg :: GridSize
    , md :: GridSize
    , sm :: GridSize
    , spacing :: GridSpacing
    , wrap :: Wrap
    , xl :: GridSize
    , xs :: GridSize
    , zeroMinWidth :: Boolean
    | r
    )

type GridReqPropsRow (r :: # Type)
  = r

type GridPropsRow (r :: # Type)
  = GridOptPropsRow (GridReqPropsRow r)

foreign import _UnsafeGrid :: forall componentProps. ReactComponent { | GridPropsRow componentProps }

_Grid ::
  forall given optionalGiven optionalMissing props required.
  Nub' (GridReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (GridPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  ReactComponent { | given }
_Grid = unsafeCoerce _UnsafeGrid

grid ::
  forall given optionalGiven optionalMissing props required.
  Nub' (GridReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (GridPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> JSX
grid ps = element _Grid ps

grid' :: GridProps -> JSX
grid' = MUI.React.Basic.element _Grid'

_Grid' :: ReactComponent GridProps
_Grid' = unsafeCoerce _UnsafeGrid

gridWithStyles ::
  forall jss_ jss.
  Prim.Row.Union jss jss_ GridClassesJSS =>
  (MUI.Core.Styles.Theme -> { | jss }) -> Effect.Effect (GridProps -> JSX)
gridWithStyles style = render
  where
  withStyles' :: ReactComponent GridProps -> Effect.Effect (ReactComponent GridProps)
  withStyles' = MUI.Core.Styles.withStyles (unsafeCoerce style)

  styledComponent = withStyles' _Grid'

  render = map MUI.React.Basic.element styledComponent

foreign import data GridProps :: Type

props ::
  forall given optionalGiven optionalMissing props required.
  Nub' (GridReqPropsRow ()) required =>
  Prim.Row.Union required optionalGiven given =>
  Nub' (GridPropsRow React.Basic.DOM.Props_div) props =>
  Prim.Row.Union given optionalMissing props =>
  { | given } -> GridProps
props = unsafeCoerce
